<modification>
    <id>Product Variants</id>
    <version>1.0</version>
    <vqmver>2.3.0</vqmver>
    <author>Sergey Milus</author>
    <file name="admin/controller/common/header.php">
        <operation>
            <search position="after"><![CDATA[$this->data['text_zone'] = $this->language->get('text_zone');]]></search>
            <add><![CDATA[
		$this->data['text_variantproduct'] = $this->language->get('text_variantproduct');
            ]]></add>
        </operation>
        <operation>
            <search position="after"><![CDATA[$this->data['zone'] = $this->url->link('localisation/zone', 'token=' . $this->session->data['token'], 'SSL');]]></search>
            <add><![CDATA[
			$this->data['variantproduct'] = $this->url->link('catalog/variantproducts', 'token=' . $this->session->data['token'], 'SSL');
            ]]></add>
        </operation>
    </file>
    <file name="admin/view/template/common/header.tpl">
        <operation>
            <search position="after"><![CDATA[<li><a href="<?php echo $module; ?>"><?php echo $text_module; ?></a></li>]]></search>
            <add><![CDATA[
          <li><a href="<?php echo $variantproduct; ?>"><?php echo $text_variantproduct; ?></a></li>
            ]]></add>
        </operation>
    </file>
	<file name="admin/language/english/common/header.php">
		<operation>
			<search position="before"><![CDATA[?>]]></search>
			<add><![CDATA[$_['text_variantproduct']                         = 'Product Variants';]]></add>
		</operation>
	</file>
	<file name="admin/language/russian/common/header.php">
		<operation>
			<search position="before"><![CDATA[?>]]></search>
			<add><![CDATA[$_['text_variantproduct']                         = 'Варианты Товаров';]]></add>
		</operation>
	</file>	
	<file name="catalog/model/catalog/product.php">
		<operation>
			<search position="before"><![CDATA[public function getProductAttributes($product_id)]]></search>
			<add><![CDATA[    //product variant
    public function getProductVariantproducts($product_id)
    {
        $variantproduct_data = array();

        $sql = "
					SELECT vd.title, (SELECT GROUP_CONCAT(v2p.product_id) FROM " . DB_PREFIX . "variantproducts_to_product v2p WHERE v.variantproduct_id = v2p.variantproduct_id AND v2p.product_id<>'" . (int)$product_id . "') prodIds
					FROM " . DB_PREFIX . "variantproducts v
					LEFT JOIN " . DB_PREFIX . "variantproducts_description vd ON (v.variantproduct_id = vd.variantproduct_id)
					LEFT JOIN " . DB_PREFIX . "variantproducts_to_product v2p ON (v.variantproduct_id = v2p.variantproduct_id)
					WHERE
					    v2p.product_id = '" . (int)$product_id . "' AND
					    vd.language_id = '" . $this->config->get('config_language_id') . "' AND
					    v.status = '1'
					ORDER BY v.sort_order, v.variantproduct_id ASC
					";
        $variantproduct_query = $this->db->query($sql);

        foreach ($variantproduct_query->rows as $variantproduct) {
            $products = array();
            if ($variantproduct['prodIds']) $products = $this->getPorudctsByIds(explode(',', $variantproduct['prodIds']));

            $variantproduct_data[] = array(
                'title' => $variantproduct['title'],
                'products' => $products,
            );
        }

        return $variantproduct_data;
    }

    public function getPorudctsByIds($ids)
    {
        if ($this->customer->isLogged()) {
            $customer_group_id = $this->customer->getCustomerGroupId();
        } else {
            $customer_group_id = $this->config->get('config_customer_group_id');
        }

        $sql = "SELECT DISTINCT *, pd.name AS name, p.image, m.name AS manufacturer, (SELECT price FROM " . DB_PREFIX . "product_discount pd2 WHERE pd2.product_id = p.product_id AND pd2.customer_group_id = '" . (int)$customer_group_id . "' AND pd2.quantity = '1' AND ((pd2.date_start = '0000-00-00' OR pd2.date_start < NOW()) AND (pd2.date_end = '0000-00-00' OR pd2.date_end > NOW())) ORDER BY pd2.priority ASC, pd2.price ASC LIMIT 1) AS discount, (SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$customer_group_id . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special, (SELECT points FROM " . DB_PREFIX . "product_reward pr WHERE pr.product_id = p.product_id AND customer_group_id = '" . (int)$customer_group_id . "') AS reward, (SELECT ss.name FROM " . DB_PREFIX . "stock_status ss WHERE ss.stock_status_id = p.stock_status_id AND ss.language_id = '" . (int)$this->config->get('config_language_id') . "') AS stock_status, (SELECT wcd.unit FROM " . DB_PREFIX . "weight_class_description wcd WHERE p.weight_class_id = wcd.weight_class_id AND wcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS weight_class, (SELECT lcd.unit FROM " . DB_PREFIX . "length_class_description lcd WHERE p.length_class_id = lcd.length_class_id AND lcd.language_id = '" . (int)$this->config->get('config_language_id') . "') AS length_class, (SELECT AVG(rating) AS total FROM " . DB_PREFIX . "review r1 WHERE r1.product_id = p.product_id AND r1.status = '1' GROUP BY r1.product_id) AS rating, (SELECT COUNT(*) AS total FROM " . DB_PREFIX . "review r2 WHERE r2.product_id = p.product_id AND r2.status = '1' GROUP BY r2.product_id) AS reviews, p.sort_order FROM " . DB_PREFIX . "product p LEFT JOIN " . DB_PREFIX . "product_description pd ON (p.product_id = pd.product_id) LEFT JOIN " . DB_PREFIX . "product_to_store p2s ON (p.product_id = p2s.product_id) LEFT JOIN " . DB_PREFIX . "manufacturer m ON (p.manufacturer_id = m.manufacturer_id) WHERE p.product_id IN('" . implode("','", $ids) . "') AND pd.language_id = '" . (int)$this->config->get('config_language_id') . "' AND p.status = '1' AND p.date_available <= NOW() AND p2s.store_id = '" . (int)$this->config->get('config_store_id') . "' ORDER BY p.sort_order";
        $query = $this->db->query($sql);

        if ($query->num_rows) {

            $products = array();
            foreach ($query->rows as $row) {
                $products[] = array(
                    'product_id' => $row['product_id'],
                    'name' => $row['name'],
                    'description' => $row['description'],
                    'meta_description' => $row['meta_description'],
                    'meta_keyword' => $row['meta_keyword'],
                    'model' => $row['model'],
                    'sku' => $row['sku'],
                    'upc' => $row['upc'],
                    'location' => $row['location'],
                    'quantity' => $row['quantity'],
                    'stock_status' => $row['stock_status'],
                    'image' => $row['image'],
                    'manufacturer_id' => $row['manufacturer_id'],
                    'manufacturer' => $row['manufacturer'],
                    'price' => ($row['discount'] ? $row['discount'] : $row['price']),
                    'special' => $row['special'],
                    'reward' => $row['reward'],
                    'points' => $row['points'],
                    'tax_class_id' => $row['tax_class_id'],
                    'date_available' => $row['date_available'],
                    'weight' => $row['weight'],
                    'weight_class_id' => $row['weight_class_id'],
                    'length' => $row['length'],
                    'width' => $row['width'],
                    'height' => $row['height'],
                    'length_class_id' => $row['length_class_id'],
                    'subtract' => $row['subtract'],
                    'rating' => round($row['rating']),
                    'reviews' => $row['reviews'] ? $row['reviews'] : 0,
                    'minimum' => $row['minimum'],
                    'sort_order' => $row['sort_order'],
                    'status' => $row['status'],
                    'date_added' => $row['date_added'],
                    'date_modified' => $row['date_modified'],
                    'viewed' => $row['viewed']
                );
            }

            return $products;
        } else {
            return false;
        }
    }

    //product variant]]></add>
		</operation>
	</file>	
	<file name="catalog/controller/product/product.php">
		<operation>
			<search position="before"><![CDATA[$this->model_catalog_product->updateViewed($this->request->get['product_id']);]]></search>
			<add><![CDATA[    //product variant
            $this->data['variantproducts'] = $this->model_catalog_product->getProductVariantproducts($this->request->get['product_id']);

            foreach ($this->data['variantproducts'] as $k => $variantproduct) {
                if ($variantproduct['products']) {
                    foreach ($variantproduct['products'] as $j => $product) {
                        if ($product['image']) {
                            $image = $this->model_tool_image->resize($product['image'], 60, 60);
                        } else {
                            $image = false;
                        }

                        if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
                            $price = $this->currency->format($this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')));
                        } else {
                            $price = false;
                        }

                        if ((float)$product['special']) {
                            $special = $this->currency->format($this->tax->calculate($product['special'], $product['tax_class_id'], $this->config->get('config_tax')));
                        } else {
                            $special = false;
                        }

                        $product['image'] = $image;
                        $product['price'] = $price;
                        $product['special'] = $special;

                        $product['description'] = html_entity_decode($product['description'], ENT_QUOTES, 'UTF-8');
						$product['href'] = $this->url->link('product/product', 'product_id=' . $product['product_id']);						
                        $this->data['variantproducts'][$k]['products'][$j] = $product;
                    }
                }
            }
		if (file_exists('catalog/view/theme/' . $this->config->get('config_template') . '/stylesheet/variants.css')) {
			$this->document->addStyle('catalog/view/theme/' . $this->config->get('config_template') . '/stylesheet/variants.css');
		} else {
			$this->document->addStyle('catalog/view/theme/default/stylesheet/variants.css');
		}
		if (file_exists('catalog/view/theme/' . $this->config->get('config_template') . '/stylesheet/darktooltip.css')) {
			$this->document->addStyle('catalog/view/theme/' . $this->config->get('config_template') . '/stylesheet/darktooltip.css');
		} else {
			$this->document->addStyle('catalog/view/theme/default/stylesheet/darktooltip.css');
		}		
		$this->document->addScript('catalog/view/javascript/jquery.darktooltip.min.js');		
    //product variant]]></add>
		</operation>
	</file>

</modification>